" syntax
syntax on

" disable default vim startup
set shortmess+=I

" line numbers and relative line numbers
set rnu
set nu

" status line
set laststatus=2

" backspace over anything
set backspace=indent,eol,start

" allows hidden buffers with unsaved changes
set hidden

" hide mode
set noshowmode

" makes search case-smart
set ignorecase
set smartcase

" search as you type
set incsearch

" enable mouse support
set mouse+=a

" disable bell noise
set noerrorbells visualbell t_vb=

" highlight search
set hls

" extend history
set history=8192

" split pane
set splitbelow
set splitright

" tabstops
set tabstop=2 shiftwidth=2 expandtab

" omnicompletion
filetype plugin on
set omnifunc=syntaxcomplete#Complete

" background kitty
" let &t_ut=''

" block in normal mode, beam in insert mode
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" Keybindings
" auto-compile LaTeX files
autocmd BufWritePost *.tex silent! execute "!pdflatex % >/dev/null 2&1" | redraw!

" macro to substituate > S
nnoremap S :%s//g<Left><Left>

" Ctrl-p to Rg
nmap <C-p> :Rg<CR>

" toggle NERDTree
nmap <C-h> :NERDTreeToggle<CR>

" copy-paste to system buffer
set clipboard+=unnamedplus

" syntax highlight for .md code blocks
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'java']

" plugins
" vim-plug automatic installation
if has('nvim')
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

call plug#begin('~/.vim/plugsrc')

" general
Plug 'justinmk/vim-sneak'
Plug 'junegunn/fzf.vim'

" colors
" Plug 'morhetz/gruvbox'
" Plug 'dracula/vim',{'as':'dracula'}

" gui
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'

" syntactic language
Plug 'w0rp/ale'

call plug#end()

" Plugin configuration
" NERDTree
let NERDTreeShowHidden=1

" start NERDTree on startup
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * NERDTree | if argc() > 0 || exists("s:std_in") | wincmd p | endif

" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | 
  \ quit | endif

" Highlight current file buffer on the tree
" Check if NERDTree is open or active
function! IsNERDTreeOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
function! SyncTree()
  if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
    wincmd p
  endif
endfunction

" Highlight currently open buffer in NERDTree
autocmd BufRead * call SyncTree()

" nerdtree-git-plugin
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }

" FZF
" window
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.5, 'highlight': 'Comment' } }

" lightline
if !has('gui_running')
  set t_Co=256
endif
let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ }

" colors
" set bg=dark
" colorscheme dracula
" highlight normal ctermbg=black
set bg=dark
highlight clear SignColumn
